"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/sound-effects.ts":
/*!************************************!*\
  !*** ./src/utils/sound-effects.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   playClickSound: function() { return /* binding */ playClickSound; },\n/* harmony export */   playLoseSound: function() { return /* binding */ playLoseSound; },\n/* harmony export */   playWinSound: function() { return /* binding */ playWinSound; },\n/* harmony export */   withClickSound: function() { return /* binding */ withClickSound; }\n/* harmony export */ });\n// Sound effects utility functions\n// Sound paths\nconst CLICK_SOUND_PATH = \"/assets/music/click/ES_Button Press Click, Tap, Video Game, Main Menu, Select, Positive 02 - Epidemic Sound.mp3\";\nconst LANE_SELECT_SOUND_PATH = \"/assets/music/click/ES_Digital, Video Game, Select, Positive, Notification 01 - Epidemic Sound.mp3\";\nconst LOSE_SOUND_PATH = \"/assets/music/lose/ES_Cartoon Character, Voice, Male, High Pitched, Says Uh Oh 01 - Epidemic Sound.mp3\";\n// Win sound paths based on lane reached\nconst WIN_SOUNDS = {\n    small: \"/assets/music/win/ES_Retro, Star, Win, Gain x3 - Epidemic Sound.mp3\",\n    medium: \"/assets/music/win/ES_Retro, Star, Win, Gain x6 - Epidemic Sound.mp3\",\n    large: \"/assets/music/win/ES_Retro, Star, Win, Gain x9 - Epidemic Sound.mp3\",\n    jackpot: \"/assets/music/win/ES_Retro, Star, Win, Gain, Many - Epidemic Sound.mp3\" // Final lanes (9+)\n};\n// Cache the audio instances to avoid creating multiple instances\nlet clickSound = null;\nlet laneSelectSound = null;\nlet loseSound = null;\nlet winSounds = {\n    small: null,\n    medium: null,\n    large: null,\n    jackpot: null\n};\n/**\n * Play the button click sound\n * @param volume Optional volume level (0.0 to 1.0), defaults to 0.5\n */ const playClickSound = function() {\n    let volume = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0.5;\n    try {\n        // Create the audio instance if it doesn't exist\n        if (!clickSound) {\n            clickSound = new Audio(CLICK_SOUND_PATH);\n        }\n        // Set the volume\n        clickSound.volume = volume;\n        // Reset the audio to the beginning if it's already playing\n        clickSound.currentTime = 0;\n        // Play the sound\n        clickSound.play().catch((error)=>{\n            console.error(\"Error playing click sound:\", error);\n        });\n    } catch (error) {\n        console.error(\"Error initializing click sound:\", error);\n    }\n};\n/**\n * Create a click handler that plays a sound and then executes the provided function\n * @param handler The function to execute after playing the sound\n * @param volume Optional volume level (0.0 to 1.0), defaults to 0.5\n * @returns A new function that plays the sound and then executes the handler\n */ const withClickSound = function(handler) {\n    let volume = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.5;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        playClickSound(volume);\n        return handler(...args);\n    };\n};\n/**\n * Play a win sound based on the lane reached\n * @param lane The lane number reached (1-10)\n * @param volume Optional volume level (0.0 to 1.0), defaults to 0.7\n */ /**\n * Play the lose sound effect\n * @param volume Optional volume level (0.0 to 1.0), defaults to 0.7\n */ const playLoseSound = function() {\n    let volume = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0.7;\n    try {\n        // Create the audio instance if it doesn't exist\n        if (!loseSound) {\n            loseSound = new Audio(LOSE_SOUND_PATH);\n        }\n        // Set the volume\n        loseSound.volume = volume;\n        // Reset the audio to the beginning if it's already playing\n        loseSound.currentTime = 0;\n        // Play the sound\n        loseSound.play().catch((error)=>{\n            console.error(\"Error playing lose sound:\", error);\n        });\n    } catch (error) {\n        console.error(\"Error initializing lose sound:\", error);\n    }\n};\n/**\n * Play a win sound based on the lane reached\n * @param lane The lane number reached (1-10)\n * @param volume Optional volume level (0.0 to 1.0), defaults to 0.7\n */ const playWinSound = function(lane) {\n    let volume = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.7;\n    try {\n        // Determine which win sound to play based on the lane reached\n        let soundType;\n        if (lane <= 3) {\n            soundType = \"small\";\n        } else if (lane <= 6) {\n            soundType = \"medium\";\n        } else if (lane <= 9) {\n            soundType = \"large\";\n        } else {\n            soundType = \"jackpot\";\n        }\n        // Create the audio instance if it doesn't exist\n        if (!winSounds[soundType]) {\n            winSounds[soundType] = new Audio(WIN_SOUNDS[soundType]);\n        }\n        // Set the volume\n        if (winSounds[soundType]) {\n            winSounds[soundType].volume = volume;\n            // Reset the audio to the beginning if it's already playing\n            winSounds[soundType].currentTime = 0;\n            // Play the sound\n            winSounds[soundType].play().catch((error)=>{\n                console.error(\"Error playing \".concat(soundType, \" win sound:\"), error);\n            });\n        }\n    } catch (error) {\n        console.error(\"Error playing win sound:\", error);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/sound-effects.ts\n"));

/***/ })

});